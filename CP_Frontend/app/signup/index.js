import React, {useEffect, useState} from 'react';
import {
    KeyboardAvoidingView,
    ScrollView,
    Platform,
    View,
    Text,
    TouchableOpacity,
    Alert, BackHandler,
} from 'react-native';
import { useRouter } from 'expo-router';
import AsyncStorage from '@react-native-async-storage/async-storage';
import CustomInput from '../../components/CustomInput';
import PrimaryButton from '../../components/PrimaryButton';
import {common, auth, lightColors, darkColors, preference} from '../../styles';
import { useTheme } from '../../context/ThemeContext';
import { BASE_URL } from "../../BASE_URL";
import axios from 'axios';

export default function SignUpScreen() {
    const router = useRouter();
    const { isDarkMode } = useTheme();
    const colors = isDarkMode ? darkColors : lightColors;

    const [name, setName] = useState('');
    const [phone, setPhone] = useState('');
    const [userId, setUserId] = useState('');
    const [password, setPassword] = useState('');
    const [confirmPassword, setConfirmPassword] = useState('');
    const [email, setEmail] = useState('');
    const [sex, setSex] = useState('');
    const [authCode, setAuthCode] = useState('');
    const [isVerified, setIsVerified] = useState(false);
    const [showCodeInput, setShowCodeInput] = useState(false);

    const confirmBorderColor = !confirmPassword
        ? colors.border
        : password === confirmPassword
            ? 'green'
            : 'red';

    const isFormValid =
        name.trim() &&
        phone.trim() &&
        userId.trim() &&
        password.trim() &&
        confirmPassword.trim() &&
        password === confirmPassword &&
        email.trim() &&
        sex.trim() &&
        authCode.trim() &&
        isVerified;

    const handleBackPress = () => {
        router.back(); // Îí§Î°ú Í∞ÄÍ∏∞
    };

    useEffect(() => {
        const backHandler = BackHandler.addEventListener(
            'hardwareBackPress',
            () => {
                handleBackPress(); // Îí§Î°ú Í∞ÄÍ∏∞ Ìò∏Ï∂ú
                return true; // Îí§Î°ú Í∞ÄÍ∏∞ Ïù¥Î≤§Ìä∏Î•º Ï≤òÎ¶¨ÌñàÎã§Í≥† ÏïåÎ†§Ï§å
            }
        );

        return () => backHandler.remove(); // Ïª¥Ìè¨ÎÑåÌä∏ Ïñ∏ÎßàÏö¥Ìä∏ Ïãú Ïù¥Î≤§Ìä∏ Ï†úÍ±∞
    }, []);

    // Ï†ÑÌôîÎ≤àÌò∏ Ïù∏Ï¶ù
    const handleRequestVerification = async () => {
        if (!phone) {
            Alert.alert('Ïò§Î•ò', 'Ï†ÑÌôîÎ≤àÌò∏Î•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.');
            return;
        }

        try {
            const response = await axios.post(`${BASE_URL}/auth/send-sms`, {
                phoneNum: phone.replace(/[^0-9]/g, '') // Ïà´ÏûêÎßå Ï∂îÏ∂úÌïòÏó¨ Ï†ÑÏÜ°
            }, {
                headers: {
                    'Content-Type': 'application/json'
                }
            });

            Alert.alert('ÏÑ±Í≥µ', response.data); // ÏÑúÎ≤Ñ Î©îÏãúÏßÄ Ï∂úÎ†•
            console.log('üì§ Ïù∏Ï¶ùÎ≤àÌò∏ ÏöîÏ≤≠:', phone);
            setShowCodeInput(true);
        } catch (error) {
            console.error('‚ùå Ïù∏Ï¶ùÎ≤àÌò∏ ÏöîÏ≤≠ Ïã§Ìå®:', error);
            Alert.alert('Ïã§Ìå®', 'Ïù∏Ï¶ùÎ≤àÌò∏ ÏöîÏ≤≠ Ï§ë Î¨∏Ï†úÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
        }
    };


    // ÌöåÏõêÍ∞ÄÏûÖ
    const handleSignup = async () => {
        if (!isFormValid) {
            Alert.alert('ÏûÖÎ†• Ïò§Î•ò', 'Î™®Îì† Ìï≠Î™©ÏùÑ Ïò¨Î∞îÎ•¥Í≤å ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.');
            return;
        }

        try {
            // 1. Ïù∏Ï¶ùÎ≤àÌò∏ Í≤ÄÏ¶ù ÏöîÏ≤≠
            const verifyResponse = await axios.post(`${BASE_URL}/auth/verify-sms`, {
                phoneNum: phone.replace(/[^0-9]/g, ''),
                authCode: authCode // ÏÇ¨Ïö©ÏûêÍ∞Ä ÏûÖÎ†•Ìïú Ïù∏Ï¶ùÎ≤àÌò∏ Î≥ÄÏàò
            });

            const isCodeValid = verifyResponse.data === true;

            if (!isCodeValid) {
                Alert.alert('Ïù∏Ï¶ù Ïã§Ìå®', 'Ïù∏Ï¶ùÎ≤àÌò∏Í∞Ä ÏùºÏπòÌïòÏßÄ ÏïäÏäµÎãàÎã§.');
                return;
            }

            // 2. Ïù∏Ï¶ù ÏÑ±Í≥µ ‚Üí ÌöåÏõêÍ∞ÄÏûÖ ÏöîÏ≤≠
            const signupResponse = await axios.post(`${BASE_URL}/auth/signup`, {
                userId: userId, // ÏÇ¨Ïö©Ïûê ID
                userName: name,
                password: password,
                phoneNum: phone.replace(/[^0-9]/g, ''),
                email: email,
                sex: sex
            });

            // 3. ÏÑ±Í≥µ Ï≤òÎ¶¨
            Alert.alert('ÌöåÏõêÍ∞ÄÏûÖ ÏôÑÎ£å', `${name}Îãò, ÌôòÏòÅÌï©ÎãàÎã§!`);
            console.log('üë§ ÌöåÏõêÍ∞ÄÏûÖ ÏÑ±Í≥µ:', signupResponse.data);
            router.push('/login');

        } catch (error) {
            console.error('‚ùå ÌöåÏõêÍ∞ÄÏûÖ ÎòêÎäî Ïù∏Ï¶ù Ïã§Ìå®:', error);
            Alert.alert('Ïò§Î•ò', 'ÌöåÏõêÍ∞ÄÏûÖ Ï§ë Î¨∏Ï†úÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
        }
    };



    const renderButton = (label, selected, onPress, key) => (
        <TouchableOpacity
            key={key}
            onPress={onPress}
            style={[
                preference.optionBtn,
                selected && preference.optionBtnSelected,
            ]}
        >
            <Text
                style={[
                    preference.optionText,
                    selected && preference.optionTextSelected,
                ]}
            >
                {label}
            </Text>
        </TouchableOpacity>
    );






    // ------------------------------------------------------------------------ //






    return (
        <KeyboardAvoidingView
            style={{ flex: 1 }}
            behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
            keyboardVerticalOffset={80}
        >
            <ScrollView
                contentContainerStyle={[
                    common.container,
                    { backgroundColor: colors.background },
                ]}
                keyboardShouldPersistTaps="handled"
            >
                <Text style={[common.title, { color: colors.text }]}>ÌöåÏõêÍ∞ÄÏûÖ</Text>

                <View
                    style={{
                        backgroundColor: colors.card,
                        padding: 24,
                        borderRadius: 16,
                        width: '100%',
                        shadowColor: '#000',
                        shadowOffset: { width: 0, height: 2 },
                        shadowOpacity: 0.1,
                        shadowRadius: 4,
                        elevation: 3,
                        marginBottom: 32,
                    }}
                >
                    <CustomInput
                        placeholder="Ïù¥Î¶Ñ"
                        value={name}
                        onChangeText={setName}
                        backgroundColor={colors.inputBg}
                        color={colors.text}
                        borderColor={colors.border}
                        placeholderTextColor={colors.placeholder}
                    />

                    <View style={auth.row}>
                        <View style={{ flex: 1 }}>
                            <CustomInput
                                placeholder="Ï†ÑÌôîÎ≤àÌò∏ (- ÏóÜÏù¥)"
                                value={phone}
                                onChangeText={setPhone}
                                keyboardType="phone-pad"
                                backgroundColor={colors.inputBg}
                                color={colors.text}
                                borderColor={colors.border}
                                placeholderTextColor={colors.placeholder}
                            />
                        </View>
                        <TouchableOpacity
                            style={[auth.verifyButton, { backgroundColor: colors.accent }]}
                            onPress={handleRequestVerification}
                        >
                            <Text style={auth.verifyText}>
                                {showCodeInput ? 'Ïû¨Ï†ÑÏÜ°' : 'Ïù∏Ï¶ùÏöîÏ≤≠'}
                            </Text>
                        </TouchableOpacity>
                    </View>

                    {showCodeInput && (
                        <CustomInput
                            placeholder="Ïù∏Ï¶ùÎ≤àÌò∏ ÏûÖÎ†•"
                            value={authCode}
                            onChangeText={(text) => {
                                setAuthCode(text);
                                if (text.length >= 4) setIsVerified(true);
                            }}
                            keyboardType="number-pad"
                            backgroundColor={colors.inputBg}
                            color={colors.text}
                            borderColor={colors.border}
                            placeholderTextColor={colors.placeholder}
                        />
                    )}

                    <CustomInput
                        placeholder="ÏïÑÏù¥Îîî"
                        value={userId}
                        onChangeText={setUserId}
                        backgroundColor={colors.inputBg}
                        color={colors.text}
                        borderColor={colors.border}
                        placeholderTextColor={colors.placeholder}
                    />

                    <CustomInput
                        placeholder="ÎπÑÎ∞ÄÎ≤àÌò∏"
                        value={password}
                        onChangeText={setPassword}
                        secureTextEntry
                        backgroundColor={colors.inputBg}
                        color={colors.text}
                        borderColor={colors.border}
                        placeholderTextColor={colors.placeholder}
                    />

                    <CustomInput
                        placeholder="ÎπÑÎ∞ÄÎ≤àÌò∏ ÌôïÏù∏"
                        value={confirmPassword}
                        onChangeText={setConfirmPassword}
                        secureTextEntry
                        backgroundColor={colors.inputBg}
                        color={colors.text}
                        borderColor={confirmBorderColor}
                        placeholderTextColor={colors.placeholder}
                    />

                    <CustomInput
                        placeholder="Ïù¥Î©îÏùº"
                        value={email}
                        onChangeText={setEmail}
                        backgroundColor={colors.inputBg}
                        color={colors.text}
                        borderColor={colors.border}
                        placeholderTextColor={colors.placeholder}
                    />

                    <Text style={[preference.label, { color: colors.text }]}>ÏÑ±Î≥Ñ</Text>
                    <View style={preference.optionRow}>
                        {['ÎÇ®Ïûê', 'Ïó¨Ïûê'].map((s) =>
                            renderButton(s, sex === s, () => setSex(s), s)
                        )}
                    </View>

                    <PrimaryButton
                        title="ÏôÑÎ£å"
                        onPress={handleSignup}
                        disabled={!isFormValid}
                    />
                </View>
            </ScrollView>
        </KeyboardAvoidingView>
    );
}
